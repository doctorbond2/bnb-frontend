

När man definierar en modulär lösning på extrareducers:
:(builder) => functionName(builder)

TODO: Fixa api_keys från frontend. KLART

TODO: Fixa autoredirect vid login/register om man är inloggad. KLART (dubbelkolla register sen)

TODO: Fixa response typen för sendrequest, den borde vara likadan som responsen skickad från api:t. Inkluderas {status, data:T, errors osv...}

TODO: Fixa ENUMS för urls, process.env för enums sedan importa url Enums

TODO: Flatpickr för dates i NewBookingForm och NewPropertyForm

TODO: Implementera Cloundinary för image handling



To implement Cloudinary for image uploading and management in your Next.js frontend, you'll need to follow a few steps to integrate their service properly. Cloudinary provides powerful tools for uploading, optimizing, and serving images, and it works well with Next.js. Here's a step-by-step guide on how to set it up:

1. Create a Cloudinary Account
Sign up for a free account at Cloudinary.
Once you sign up, you’ll receive API credentials (Cloud Name, API Key, and API Secret) that you will use to interact with Cloudinary.
2. Install the Required Cloudinary Packages
In your Next.js project, install the cloudinary Node.js package for easier integration with their API.

bash
Kopiera kod
npm install cloudinary
This will allow you to use Cloudinary's API from your backend (e.g., an API route in Next.js).

3. Configure Cloudinary in Your Next.js Backend
Since Cloudinary requires a secure environment to upload images, you should configure the upload logic on your Next.js API routes. Storing your API keys securely in the backend is essential to avoid exposing sensitive information on the frontend.

Create a new .env.local file in the root of your project to store your Cloudinary credentials (this file should not be pushed to Git):


CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret
Next, configure Cloudinary in an API route. Create a new file under pages/api/upload.js:

js
// pages/api/upload.js
import cloudinary from 'cloudinary';

cloudinary.v2.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { image } = req.body; // Expect the image data from frontend
    
    try {
      const result = await cloudinary.v2.uploader.upload(image, {
        folder: 'properties', // Save images in a 'properties' folder
      });

      return res.status(200).json({ url: result.secure_url });
    } catch (error) {
      return res.status(500).json({ error: 'Upload failed' });
    }
  } else {
    return res.status(405).json({ message: 'Method not allowed' });
  }
}
This route uses Cloudinary's Node SDK to handle the image upload process. The folder parameter stores your images in an organized folder in Cloudinary.

4. Create the Image Upload Form in Next.js
On the frontend, create an upload form that allows users to select an image and submit it to the Cloudinary API.

jsx
Kopiera kod
import { useState } from 'react';

export default function ImageUpload() {
  const [selectedImage, setSelectedImage] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
    setSelectedImage(file);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!selectedImage) {
      alert('Please select an image to upload');
      return;
    }

    setLoading(true);

    // Convert image to base64 to send in the POST request
    const formData = new FormData();
    formData.append('file', selectedImage);
    formData.append('upload_preset', 'your_upload_preset'); // Optional, if using upload presets in Cloudinary

    const reader = new FileReader();
    reader.readAsDataURL(selectedImage);

    reader.onloadend = async () => {
      const base64Image = reader.result;

      try {
        const response = await fetch('/api/upload', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ image: base64Image }),
        });

        const data = await response.json();
        if (response.ok) {
          setImageUrl(data.url); // Image URL returned from Cloudinary
        } else {
          alert(data.error);
        }
      } catch (error) {
        console.error('Error uploading image:', error);
      } finally {
        setLoading(false);
      }
    };
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input
          type="file"
          accept="image/*"
          onChange={handleImageUpload}
        />
        <button type="submit" disabled={loading}>
          {loading ? 'Uploading...' : 'Upload Image'}
        </button>
      </form>

      {imageUrl && (
        <div>
          <p>Image uploaded successfully!</p>
          <img src={imageUrl} alt="Uploaded" width="300" />
        </div>
      )}
    </div>
  );
}
Explanation:
handleImageUpload: Handles the image selection and stores it in selectedImage.
handleSubmit: When the form is submitted, the image is converted to base64 format (which Cloudinary accepts) and is then sent to your API route (/api/upload).
The response from Cloudinary contains the uploaded image's URL, which is stored in the imageUrl state and displayed on the page.
5. Optimize Images (Optional but Recommended)
Once your images are uploaded to Cloudinary, you can use their built-in transformations and optimizations directly from the URLs. For example, you can resize an image or serve it in WebP format like so:

html
Kopiera kod
<img src="https://res.cloudinary.com/<your-cloud-name>/image/upload/w_300,h_300,c_fill,q_auto,f_auto/v1611234567/sample.jpg" alt="Optimized Image" />
This URL automatically:

Resizes the image to 300x300 pixels (w_300,h_300).
Fills the box using c_fill.
Optimizes the quality automatically (q_auto).
Converts to a modern image format like WebP (f_auto), based on browser compatibility.
6. Deploy to Vercel
After setting everything up, ensure your .env.local file is properly set up in production. When deploying to Vercel, add the Cloudinary environment variables to your Vercel dashboard.

Go to your Vercel project.
Click Settings → Environment Variables.
Add the following:
CLOUDINARY_CLOUD_NAME
CLOUDINARY_API_KEY
CLOUDINARY_API_SECRET
Once your project is deployed, users will be able to upload images using Cloudinary via your Next.js frontend.

Conclusion:
By following these steps, you’ve integrated Cloudinary with your Next.js frontend to handle image uploads securely and efficiently. Cloudinary’s free tier provides ample resources for small projects, and their built-in optimizations and transformations make it a great choice for serving fast-loading images.